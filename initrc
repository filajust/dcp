# Colors
BLUE="\[\033[0;34m\]"
GREEN="\[\033[0;32m\]"
CYAN="\[\033[0;36m\]"
RED="\[\033[0;31m\]"
PURPLE="\[\033[0;35m\]"
YELLOW="\[\033[1;33m\]"
LIGHTGRAY="\[\033[0;37m\]"
DARKGRAY="\[\033[1;30m\]"
WHITE="\[\033[1;37m\]"

# General aliases
alias c="clear"
alias ll="ls -la"
alias la="ls -a"
alias h="history | tail -32"

# Git aliases
alias ga="git add"
alias gp="git push"
alias gpl="git pull"
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gll="git log --stat --oneline --decorate"
alias gs="git status"
alias gd="git diff"
alias gc="git commit"
alias gcm="git commit -m"
alias gco="git checkout"
alias gb="git branch"
alias gf="git fetch"
alias gr="git rebase"
alias gm="git merge"
alias gn="git init && git add . && git commit -m 'Initial commit.'"
alias grv="git remote -v"
gitpub() {
  if [[ -n "$1" ]]; then
    git push origin "${1}:refs/heads/$1"
    git fetch origin
    git config "branch.${1}.remote" origin
    git config "branch.${1}.merge" "refs/heads/$1"
    git checkout "$1"
  fi
}

# Linux specifics
if [[ "$(uname)" = "Linux" ]]; then
  alias pbcopy="xsel --clipboard --input"
  alias pbpaste="xsel --clipboard --output"
fi

# OS X specifics
if [[ "$(uname)" = "Darwin" ]]; then
  # Open a man page in Preview
  pman() {
    man -t "$1" | open -f -a /Applications/Preview.app
  }
fi


# PS1 Functions

parse_identity() {
  if [[ "${UID}" -eq "0" ]]; then printf "${RED}"; else printf "${GREEN}"; fi
  printf "\\\\u${WHITE}@${CYAN}\\h${WHITE}:${PURPLE}\\w${WHITE}"
}

parse_git_branch() {
  git branch 2>&- | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

git_branch_colors() {
  printf "${YELLOW}\$(parse_git_branch)${WHITE}"
}

uid_symbol() {
  local sym
  if [[ "${UID}" -eq "0" ]]; then sym="#"; else sym="$"; fi
  if [[ -n "${DPOGGI_TWOLINE}" ]]; then printf "\n"; else printf " "; fi
  printf "${RED}${sym}${WHITE} "
}

set_prompt() {
  if [[ -n "${BASH}" ]]; then
    export PS1="$(parse_identity)$(git_branch_colors)$(uid_symbol)"
  elif [[ -n "${ZSH}" ]]; then
    source "${ZSH}/themes/${ZSH_THEME}.zsh-theme"
  fi
}

# One-line or two-line prompt
oneline() {
  unset DPOGGI_TWOLINE
  set_prompt
}
twoline() {
  export DPOGGI_TWOLINE="true"
  set_prompt
}
