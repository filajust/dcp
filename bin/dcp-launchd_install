#!/usr/bin/env ruby
require 'erb'
require 'fileutils'

class Template
  PLIST_BASE = File.join(ENV["HOME"], "Library", "LaunchAgents")
  TEMPLATE_BASE = File.expand_path(File.join("..", "..", "misc"), __FILE__)
  attr_reader :basename, :dir, :user, :home

  def initialize(filename, dir = PLIST_BASE)
    template_path = File.join(TEMPLATE_BASE, filename)
    @basename = File.basename(template_path.sub(/\.erb$/, ""))
    raise ArgumentError unless File.exist?(template_path)
    @template = ERB.new(File.read(template_path))
    @dir = dir

    @user = ENV["USER"]
    @home = ENV["HOME"]
  end

  def render
    @template.result(binding)
  end

  def path
    File.join(dir, basename)
  end

  def write
    File.open(path, "w") { |f| f.write(render) }
  end
end

module Installable
  def enable
    return unless @should_enable
    system(@cmd)
    STDERR.puts "Service started and enabled."
  end

  def print_info
    unless @should_enable
      STDERR.puts "To start and enable:"
      STDERR.puts @cmd
    end
    if @formulae
      STDERR.puts "\nEnsure the following Homebrew formulae are installed: #{@formulae.join(", ")}"
    end
  end
end

class GpgAgent
  include Installable

  def initialize(should_enable)
    @plist_tmpl = Template.new("homebrew.mxcl.gpg.agent.plist.erb")
    config_dir = File.join(ENV["HOME"], ".gnupg")
    FileUtils.mkdir_p(config_dir)
    @config_tmpl = Template.new("gpg-agent.conf.erb", config_dir)

    @should_enable = should_enable
    @cmd = "launchctl load -S Aqua -w \"#{@plist_tmpl.path}\""
    @formulae = %w(gnupg2 gpg-agent pinentry-mac)
  end

  def write
    @plist_tmpl.write
    @config_tmpl.write
    File.chmod(0600, @config_tmpl.path)
  end
end

class ExportVars
  include Installable

  def initialize(should_enable)
    @plist_tmpl = Template.new("com.danpoggi.vars.plist.erb")

    @should_enable = should_enable
    @cmd = "launchctl load -w \"#{@plist_tmpl.path}\""
  end

  def write
    @plist_tmpl.write
  end
end

class EmacsMac
  include Installable

  def initialize(should_enable)
    @plist_tmpl = Template.new("homebrew.mxcl.emacs-mac.plist.erb")
    bin_dir = File.join(ENV["HOME"], ".dcp", "bin")
    @ctl_tmpl = Template.new("kill-emacs.erb", bin_dir)

    @should_enable = should_enable
    @cmd = "launchctl load -w \"#{@plist_tmpl.path}\""
  end

  def write
    @plist_tmpl.write
    @ctl_tmpl.write
    File.chmod(0755, @ctl_tmpl.path)
  end
end

installables = %w(GpgAgent ExportVars EmacsMac)
if ARGV.length < 1
  STDERR.puts "Usage: dcp-launchd_install [--enable] <installable>\n\n"
  STDERR.puts "Installables: {#{installables.join("|")}}"
  exit 1
end

installable = nil
enable = false
while ARGV.length > 0 do
  case ARGV[0]
  when "--enable"
    enable = true
    ARGV.shift
  else
    installable = ARGV.shift
  end
end

unless installable && installables.include?(installable)
  STDERR.puts "Invalid installable."
  exit 1
end

begin
  klass = Kernel.const_get(installable)
rescue NameError
  exit 1
end

install = klass.new(enable)
install.write
install.enable
install.print_info
