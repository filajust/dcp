#!/usr/bin/env ruby
require 'erb'
require 'fileutils'

class Template
  TEMPLATES_BASE = File.expand_path(File.join("..", "..", "misc"), __FILE__)
  attr_reader :basename, :dir, :user, :home

  def initialize(filename, dir)
    template_path = File.join(TEMPLATES_BASE, filename)
    @basename = File.basename(template_path.sub(/\.erb$/, ""))
    raise ArgumentError unless File.exist?(template_path)
    @template = ERB.new(File.read(template_path))
    @dir = dir

    @user = ENV["USER"]
    @home = ENV["HOME"]
  end

  def render
    @template.result(binding)
  end

  def path
    File.join(dir, basename)
  end

  def write
    File.open(path, "w") { |f| f.write(render) }
  end
end

class GpgAgent
  def initialize
    @plist_dir = File.join(ENV["HOME"], "Library", "LaunchAgents")
    @plist_tmpl = Template.new("homebrew.mxcl.gpg.agent.plist.erb", @plist_dir)
    @config_dir = File.join(ENV["HOME"], ".gnupg")
    @config_tmpl = Template.new("gpg-agent.conf.erb", @config_dir)
    FileUtils.mkdir_p(@config_dir)
  end

  def write
    @plist_tmpl.write
    @config_tmpl.write
    File.chmod(0600, @config_tmpl.path)
  end

  def print_info
    STDERR.puts "To start and enable:"
    STDERR.puts "launchctl load -S Aqua -w #{@plist_tmpl.path}"
    STDERR.puts "\nEnsure gpg, gpg-agent, and pinentry-mac formulae are installed."
  end
end

program_names = %w(GpgAgent)
if ARGV.length < 1
  STDERR.puts "Usage: dcp-launchd_install <ProgramName>\n\n"
  STDERR.puts "ProgramName: {#{program_names.join("|")}}"
  exit 1
end

unless program_names.include?(ARGV.first)
  STDERR.puts "Invalid ProgramName."
  exit 1
end

begin
  klass = Kernel.const_get(ARGV.first)
rescue NameError
  exit 1
end

program = klass.new
program.write
program.print_info
