#!/usr/bin/env ruby
require 'erb'
require 'fileutils'

HOME_DIR = ENV["HOME"]
DCP_DIR = File.join(HOME_DIR, ".dcp")

class Template
  TEMPLATES_DIR = File.join(DCP_DIR, "share", "templates")
  LAUNCHD_DIR = File.join(HOME_DIR, "Library", "LaunchAgents")

  attr_reader :basename, :dir, :user, :home

  def initialize(filename, dir = LAUNCHD_DIR)
    template_path = File.join(TEMPLATES_DIR, filename)
    raise ArgumentError unless File.exist?(template_path)

    @dir = dir
    @user = ENV["USER"]
    @home = HOME_DIR

    @basename = File.basename(template_path.sub(/\.erb$/, ""))
    @template = ERB.new(File.read(template_path))
  end

  def render
    @render ||= @template.result(binding)
  end

  def path
    @path ||= File.join(dir, basename)
  end

  def write
    File.open(path, "w") { |f| f.write(render) }
  end
end

class Installable
  def initialize(activate = false)
    @activate = activate
  end

  def activate
    return unless @activate == true
    system(@cmd)
    STDERR.puts "Service started and enabled."
  end

  def print_info
    unless @activate
      STDERR.puts "To start and enable:"
      STDERR.puts @cmd
    end

    if @formulae && @formulae.count > 0
      STDERR.puts "\nEnsure the following Homebrew formulae are installed: [#{@formulae.join(", ")}]"
    end

    if @additional_info
      STDERR.puts "\n\nAdditional info: #{@additional_info}"
    end
  end
end

class GpgAgent < Installable
  def initialize(activate = false)
    super
    @plist_tmpl = Template.new("com.danpoggi.gpg-agent.plist.erb")
    config_dir = File.join(ENV["HOME"], ".gnupg")
    FileUtils.mkdir_p(config_dir)
    @config_tmpl = Template.new("gpg-agent.conf.erb", config_dir)

    @cmd = "launchctl load -S Aqua -w \"#{@plist_tmpl.path}\""
    @formulae = %w(gnupg2 gpg-agent pinentry-mac)
    @additional_info = "to use GPG to sign all local Git commits, do: `git config --global commit.gpgsign true'"
  end

  def write
    @plist_tmpl.write
    @config_tmpl.write
    File.chmod(0600, @config_tmpl.path)
  end
end

class ExportVars < Installable
  def initialize(activate = false)
    super
    @plist_tmpl = Template.new("com.danpoggi.vars.plist.erb")
    @cmd = "launchctl load -w \"#{@plist_tmpl.path}\""
  end

  def write
    @plist_tmpl.write
  end
end

installables = %w(GpgAgent ExportVars)
if ARGV.length < 1
  STDERR.puts "Usage: dcp-launchd_install [--enable] <installable>\n\n"
  STDERR.puts "Installables: {#{installables.join("|")}}"
  exit 1
end

installable = nil
activate = false
while ARGV.length > 0 do
  case ARGV[0]
  when "--enable"
    activate = true
    ARGV.shift
  else
    installable = ARGV.shift
  end
end

unless installable && installables.include?(installable)
  STDERR.puts "Invalid installable."
  exit 1
end

begin
  klass = Kernel.const_get(installable)
rescue NameError
  exit 1
end

install = klass.new(activate)
install.write
install.activate
install.print_info
