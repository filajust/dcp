#!/bin/bash
# From http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html

print_usage() {
  printf >&2 "Usage: $(basename "$0") [options] <input>\n\n"
  printf >&2 "OPTIONS:\n"
  printf >&2 "  -h, --help                           Display this message\n"
  printf >&2 "  -t <time>, --start <time>            Set start time [00:00:00.000] (hours:minutes:seconds.ms)\n"
  printf >&2 "  -d <time>, --duration <time>         Set duration after start [max] (hours:minutes:seconds.ms)\n\n"
  printf >&2 "  -a <algo>, --algorithm <algo>        Set dithering algorithm [floyd_steinberg]\n"
  printf >&2 "  Algorithm options to try are bayer, floyd_steinberg, sierra2, sierra2_4a, or none.\n"
  printf >&2 "  bayer takes an argument, it can be specified as bayer:bayer_scale=n, where n is 1 to ~3.\n\n"
  printf >&2 "  -s <scale>, --scale <scale>          Set scale [480] (width in px)\n"
  printf >&2 "  -f <fps>, --framerate <fps>          Set framerate [15] (in fps)\n"
}

[[ "$#" -ge "1" ]] || { print_usage; exit 1; }
hash ffmpeg 2>/dev/null || { printf >&2 "Fatal: ffmpeg must be installed.\n"; exit 1; }

start_time="00:00:00.000"
algorithm="floyd_steinberg"
scale="480"
fps="15"

while [[ "$#" -gt "0" ]]; do
  case "$1" in
    -h | --help)
      print_usage
      exit 0
      ;;
    -t | --start)
      start_time="$2"
      shift 2
      ;;
    -d | --duration)
      duration="$2"
      shift 2
      ;;
    -a | --algorithm)
      algorithm="$2"
      shift 2
      ;;
    -s | --scale)
      scale="$2"
      shift 2
      ;;
    -f | --framerate)
      fps="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    -*)
      printf >&2 "Fatal: unknown option $1.\n"
      exit 1
      ;;
    *)
      input="$1"
      shift
      ;;
  esac
done
[[ -n "${input}" ]] || { printf >&2 "Fatal: no input file.\n\n"; print_usage; exit 1; }

palette="${input%.*}.png"
output="${input%.*}.gif"

filters="fps=${fps},scale=${scale}:-1:flags=lanczos"
time_opts="-ss ${start_time}"
[[ -n "${duration}" ]] && time_opts="${time_opts} -t ${duration}"
palette_opts="paletteuse=dither=${algorithm}"

printf >&2 "Generating the palette...\n"
ffmpeg -v warning ${time_opts} -i "${input}" -vf "${filters},palettegen" -y "${palette}"
printf >&2 "Makin' the GIF...\n"
ffmpeg -v warning ${time_opts} -i "${input}" -i "${palette}" -lavfi "${filters} [x]; [x][1:v] ${palette_opts}" -y "${output}"
printf >&2 "Done.\n"

rm -f "${palette}"
