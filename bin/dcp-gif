#!/usr/bin/env bash
#
# dcp-gif - creates an animated GIF from a video file, with options for time
# boundaries, dithering algorithms, resolution, and framerate.
#
# Adapted from http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html
#

set -eo pipefail

if [[ -t 1 ]]; then
  __logfln() {
    local lvl="$1"; shift
    local lvl_clr="$1"; shift
    local fmt="$1"; shift
    printf "\033[2;39;49m%s ${lvl_clr}${lvl}\033[2;39;49m : \033[0m${fmt}\n" \
           "$(date "+%Y-%m-%d %H:%M:%S")" \
           "$@"
  }
else
  __logfln() {
    local lvl="$1"; shift
    local lvl_clr="$1"; shift
    local fmt="$1"; shift
    printf "%s ${lvl} : ${fmt}\n" \
           "$(date "+%Y-%m-%d %H:%M:%S")" \
           "$@"
  }
fi

infofln() { __logfln " INFO" "\033[0;34m" "$@"; }
errorfln() { __logfln "ERROR" "\033[0;31m" "$@"; }

usage() {
  cat <<EOT
Usage: $(basename "$0") [options] <input file>

OPTIONS:
  -h, --help              Display this message
  -t, --start <time>      Set start time [00:00:00.000] (hours:minutes:seconds.ms)
  -d, --duration <time>   Set duration after start [max] (hours:minutes:seconds.ms)
  -a, --algorithm <algo>  Set dithering algorithm [floyd_steinberg]
  -s, --scale <scale>     Set scale [480] (width in px)
  -f, --framerate <fps>   Set framerate [15] (in fps)

ALGORITHMS:
  Algorithm options to try are bayer, floyd_steinberg, sierra2, sierra2_4a,
  or none. bayer takes an argument, it can be specified as bayer:bayer_scale=n,
  where n is 1 to ~3.
EOT
}

assert_deps() {
  local dep
  for dep in "$@"; do
    if ! command -v "${dep}" >/dev/null; then
      errorfln "%s not found" "${dep}"
    fi
  done
}

main() {
  local fps="15"
  local scale="480"
  local start_time="00:00:00.000"
  local algorithm="floyd_steinberg"
  local input_file

  while (( $# > 0 )); do
    case "$1" in
      -h|--help)      usage; return           ;;
      -t|--start)     start_time="$2"; shift  ;;
      -d|--duration)  duration="$2"; shift    ;;
      -a|--algorithm) algorithm="$2"; shift   ;;
      -s|--scale)     scale="$2"; shift       ;;
      -f|--framerate) fps="$2"; shift         ;;
      -*)
        errorfln "Unknown option %s\n" "$1"
        usage >&2
        return 1
        ;;
      *)              input_file="$1"
    esac
    shift
  done

  assert_deps ffmpeg

  if [[ ! -e "${input_file}" ]]; then
    errorfln "No input file\n"
    usage >&2
    return 1
  fi

  local output_gif="${input_file%.*}.gif"
  local palette="${input_file%.*}.png"

  local palette_opt="paletteuse=dither=${algorithm}"
  local filters="fps=${fps},scale=${scale}:-1:flags=lanczos"
  local -a time_opts=(-ss "${start_time}")

  if [[ -n "${duration}" ]]; then
    time_opts+=(-t "${duration}")
  fi

  infofln "Generating palette..."

  ffmpeg -v warning \
         "${time_opts[@]}" \
         -i "${input_file}" \
         -vf "${filters},palettegen" \
         -y "${palette}"

  infofln "Makin' the GIF..."

  ffmpeg -v warning \
         "${time_opts[@]}" \
         -i "${input_file}" \
         -i "${palette}" \
         -lavfi "${filters} [x]; [x][1:v] ${palette_opt}" \
         -y "${output_gif}"

  infofln "Cleanin' up that palette..."

  rm -f "${palette}"

  infofln "Done."
}

main "$@"
