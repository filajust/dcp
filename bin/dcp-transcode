#!/usr/bin/env bash

set -euo pipefail

if [[ -t 1 ]]; then
  __logfln() {
    local lvl="$1" lvl_clr="$2" fmt="$3"; shift; shift; shift
    printf "\033[2;39;49m%s ${lvl_clr}${lvl}\033[2;39;49m : \033[0m${fmt}\n" \
           "$(__log_date)" "$@"
  }
else
  __logfln() {
    local lvl="$1" fmt="$3"; shift; shift; shift
    printf "%s ${lvl} : ${fmt}\n" "$(__log_date)" "$@"
  }
fi

__log_date() { date "+%Y-%m-%d %H:%M:%S"; }

infofln() { __logfln " INFO" "\033[0;34m" "$@"; }
errorfln() { __logfln "ERROR" "\033[0;31m" "$@"; }

usage() {
  printf "Usage: %s [--ios] input1.mkv [input2.mkv]...\n" "$0"
}

assert_deps() {
  if [[ "$(uname -s)" != "Darwin" ]]; then
    errorfln "this script requires afconvert(1) from macOS"
    return 1
  fi

  local dep

  for dep in ffmpeg afconvert; do
    if ! hash "${dep}" 2> /dev/null; then
      errorfln "%s not found" "${dep}"
      return 1
    fi
  done
}

__extract_video() {
  infofln "Extracting video as-is..."
  ffmpeg -v warning -i "$1" -an -c:v copy "$2"
}

__source_to_wav() {
  infofln "Converting audio from source -> WAV..."
  ffmpeg -v warning -i "$1" -vn -c:a pcm_s16le -ac 2 "$2"
}

__wav_to_caf() {
  infofln "Converting audio from WAV -> CAF..."
  afconvert "$1" "$2" -d 0 -f caff --soundcheck-generate
}

__caf_to_aac() {
  infofln "Converting audio from CAF -> AAC (%skbps)..." "$(expr $3 / 1000)"
  afconvert "$1" "$2" \
            -d aac -f m4af \
            -u pgcm 2 -b "$3" -q 127 \
            -s 2 --soundcheck-read
}

__recombine() {
  infofln "Recombining..."
  ffmpeg -v warning -i "$1" -i "$2" -c:v copy -c:a copy "$3"
}

transcode() {
  local base="${1%.*}"
  local output="${base}.mp4"
  if [[ -e "${output}" ]]; then
    output="${base}_out.mp4"
  fi

  infofln "Transcoding %s..." "$1"

  __extract_video "$1" "${base}_video.mkv"

  __source_to_wav "$1" "${base}.wav"

  __wav_to_caf "${base}.wav" "${base}.caf"
  rm -f "${base}.wav"

  __caf_to_aac "${base}.caf" "${base}.aac" "$2"
  rm -f "${base}.caf"

  __recombine "${base}_video.mkv" "${base}.aac" "${output}"
  rm -f "${base}_video.mkv" "${base}.aac"

  infofln "Finished transcoding %s." "$1"
}

main() {
  assert_deps

  local -a input_files
  local audio_bitrate="256000"

  while [[ "$#" -gt "0" ]]; do
    case "$1" in
      --ios)
        audio_bitrate="160000"
        ;;
      --help)
        usage
        return
        ;;
      *)
        input_files+=( "$1" )
    esac
    shift
  done

  if [[ "${#input_files[@]}" -eq "0" ]]; then
    errorfln "No input files"
    return 1
  fi

  local input_file

  for input_file in "${input_files[@]}"; do
    transcode "${input_file}" "${audio_bitrate}"
  done
}

main "$@"
