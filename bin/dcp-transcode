#!/usr/bin/env bash
set -e

log_info() {
  printf "\033[0;34m[%s]:\033[0m %s\n" \
         "$(date "+%Y-%m-%dT%H:%M:%SZ")" \
         "$*"
}

log_error() {
  printf "\033[1;37;41m[%s]:\033[0m %s\n" \
         "$(date "+%Y-%m-%dT%H:%M:%SZ")" \
         "$*"
}

print_usage() {
  printf "Usage: %s [--ios] input1.mkv [input2.mkv]...\n" "$(basename "$0")"
}

check_deps() {
  if [[ "$(uname -s)" != "Darwin" ]]; then
    log_error "this script requires afconvert(1) from macOS."
    return 1
  fi
  if ! hash ffmpeg 2> /dev/null; then
    log_error "ffmpeg not found."
    return 1
  fi
  if ! hash afconvert 2> /dev/null; then
    log_error "afconvert not found."
    return 1
  fi
}

__extract_video() {
  log_info "Extracting video as-is..."
  ffmpeg -v warning -i "$1" -an -c:v copy "$2"
}

__source_to_wav() {
  log_info "Converting audio from source -> WAV..."
  ffmpeg -v warning -i "$1" -vn -c:a pcm_s16le -ac 2 "$2"
}

__wav_to_caf() {
  log_info "Converting audio from WAV -> CAF..."
  afconvert "$1" "$2" -d 0 -f caff --soundcheck-generate
}

__caf_to_aac() {
  log_info "Converting audio from CAF -> AAC ($(expr $3 / 1000)kbps)..."
  afconvert "$1" "$2" \
            -d aac -f m4af \
            -u pgcm 2 -b "$3" -q 127 \
            -s 2 --soundcheck-read
}

__recombine() {
  log_info "Recombining..."
  ffmpeg -v warning -i "$1" -i "$2" -c:v copy -c:a copy "$3"
}

transcode() {
  local base="${1%.*}"
  local output="${base}.mp4"
  if [[ -e "${output}" ]]; then
    output="${base}_out.mp4"
  fi

  log_info "Transcoding ${1}..."

  __extract_video "$1" "${base}_video.mkv"

  __source_to_wav "$1" "${base}.wav"

  __wav_to_caf "${base}.wav" "${base}.caf"

  __caf_to_aac "${base}.caf" "${base}.aac" "$2"

  __recombine "${base}_video.mkv" "${base}.aac" "${output}"

  log_info "Cleaning up intermediate files..."
  rm -f "${base}_video.mkv" \
        "${base}.wav" \
        "${base}.caf" \
        "${base}.aac"

  log_info "Finished transcoding ${1}."
}

main() {
  check_deps

  local -a inputs
  local bitrate="256000"
  while [[ "$#" -gt "0" ]]; do
    case "$1" in
      --ios)
        bitrate="160000"
        ;;
      --help)
        print_usage
        return
        ;;
      *)
        inputs+=( "$1" )
    esac
    shift
  done

  if [[ -z "${inputs[*]}" ]]; then
    log_error "No input files."
    return 1
  fi

  for input in "${inputs[@]}"; do
    transcode "${input}" "${bitrate}"
  done
}

main "$@"
