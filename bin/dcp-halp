#!/usr/bin/env bash

fail() {
  echo >&2 "$@"
  exit 1
}

write_globals() {
  initctl_bin="$(type -p "dcp-initctl")"
  local_conf_dir="${HOME}/.dcp/conf/halp"
  ssh_conf_dir="${HOME}/.ssh"
  remote_conf_dir="~/.dcp/conf/halp"

  local_id="${local_conf_dir}/${USER}"
  remote_id="${remote_conf_dir}/${USER}@$(hostname)"
  authorized_keys="${ssh_conf_dir}/authorized_keys"
  tmp_keys="${ssh_conf_dir}/tmp_keys"

  mkdir -p "${local_conf_dir}" "${ssh_conf_dir}"
}

wipe_known_hosts() {
  ssh-keygen -f "${ssh_conf_dir}/known_hosts" -R "[localhost]:${port}"
}

wipe_ssh_identity() {
  rm -f "${local_id}" "${local_id}.pub"

  if [[ -e "${authorized_keys}" ]]; then
    sed '$ d' "${authorized_keys}" >"${tmp_keys}"
    mv "${tmp_keys}" "${authorized_keys}"
  fi
}

generate_ssh_identity() {
  [[ -e "${local_id}" || -e "${local_id}.pub" ]] && wipe_ssh_identity
  ssh-keygen -q -t rsa -N "" -f "${local_id}"
  cat "${local_id}.pub" >>"${authorized_keys}"
}

user_for_host() {
  local host
  IFS="@" read -ra host <<< "$1"
  printf "${host[0]}"
}

print_usage() {
  local connection

  echo >&2 "Usage: $(basename "$0") [--skip-sshd] [--port 1234] (ssh node or connection)"
  echo >&2 ""
  echo >&2 "Currently available connections:"

  pushd "${local_conf_dir}" >/dev/null 2>&1
  if test -n "$(find . -maxdepth 1 -name '*@*' -print -quit)"; then
    for connection in *@*; do
      echo >&2 "${connection}"
    done
  else
    echo >&2 "(none)"
  fi
  popd >/dev/null 2>&1
}

port="51337"
skip_sshd="false"
while [[ "$#" -gt "0" ]]; do
  if [[ "$1" = "--help" ]]; then
    print_usage
    exit
  elif [[ "$1" = "--skip-sshd" ]]; then
    skip_sshd="true"
  elif [[ "$1" = "--port" ]]; then
    port="$2"
    shift
  else
    target="$1"
  fi

  shift
done

write_globals
[[ -n "${target}" ]] || { print_usage; exit 1; }

if [[ -e "${local_conf_dir}/$1" ]]; then
  identity="${local_conf_dir}/$1"
  user="$(user_for_host "$1")"

  [[ -e "${identity}" && -e "${identity}.pub" ]] ||
    fail "Error: invalid connection, quitting."
  wipe_known_hosts
  ssh -p "${port}" -i "${identity}" "${user}@localhost"
else
  echo "$(basename "$0") may require your local sudo password to start. Setting up..."

  generate_ssh_identity
  ssh "$1" "mkdir -p ${remote_conf_dir}"
  scp -q "${local_id}" "$1:${remote_id}"
  scp -q "${local_id}.pub" "$1:${remote_id}.pub"
  [[ "${skip_sshd}" = "true" ]] || "${initctl_bin}" start sshd

  echo "Awaiting remote assistance, Ctrl-C to end..."
  ssh -N -R "${port}:localhost:22" "$1"
  echo "Cleaning up..."

  [[ "${skip_sshd}" = "true" ]] || "${initctl_bin}" stop sshd
  ssh "$1" "rm -f ${remote_id} ${remote_id}.pub"
  wipe_ssh_identity
fi
