#!/usr/bin/env bash

[[ -z "${DCP_HALP_PORT}" ]] && DCP_HALP_PORT="51337"
key_dir_local="${HOME}/.dcp/conf/halp"
key_dir_remote="~/.dcp/conf/halp"
key_local="${key_dir_local}/${USER}"
key_remote="${key_dir_remote}/${USER}@$(hostname)"

backup_path() {
  if [[ -z "${PATH_BACKUP}" ]]; then
    export PATH_BACKUP="${PATH}"
    export PATH="/usr/bin:/bin:/usr/local/bin:/usr/sbin:/sbin:/usr/local/sbin"
  fi
}

restore_path() {
  if [[ -n "${PATH_BACKUP}" ]]; then
    export PATH="${PATH_BACKUP}"
    unset PATH_BACKUP
  fi
}

cleanup_globals() {
  unset sudo_path
  unset test_path
  unset init_ctl_type
  unset init_ctl_path
  unset ssh_ctl_path
  unset ssh_svc_name

  unset key_dir_local
  unset key_dir_remote
  unset key_local
  unset key_remote
  unset DCP_HALP_PORT
}

fail_loudly() {
  echo >&2 "$@"
  restore_path
  cleanup_globals
  exit 1
}

detect_init() {
  backup_path

  hash sudo 2>&- || fail_loudly "Error: sudo is not installed, quitting."
  sudo_path="$(type -p sudo)"
  hash test 2>&- || fail_loudly "Error: test (binary) is not installed, quitting."
  test_path="$(type -P test)"

  for prog in launchctl initctl systemctl service; do
    if hash "${prog}" 2>&-; then
      init_ctl_type="${prog}"
      init_ctl_path="$(type -p "${prog}")"
      break
    fi
  done

  for prog in /etc/init.d/ssh /etc/init.d/sshd /etc/init.d/rc.d/ssh \
              /etc/init.d/rc.d/sshd /etc/rc.d/ssh /etc/rc.d/sshd; do
    if "${sudo_path}" "${test_path}" -x "${prog}"; then
      ssh_ctl_path="${prog}"
      break
    fi
  done

  [[ -z "${init_ctl_path}" && -z "${ssh_ctl_path}" ]] &&
    fail_loudly "Error: couldn't find a way to control sshd, quitting."

  if [[ "${init_ctl_type}" = "launchctl" ]]; then
    ssh_svc_name="/System/Library/LaunchDaemons/ssh.plist"
  elif [[ "${init_ctl_type}" = "initctl" ]]; then
    ssh_svc_name="ssh"
    [[ -e "/etc/init/${ssh_svc_name}.conf" ]] ||
      ssh_svc_name="sshd"
    [[ -e "/etc/init/${ssh_svc_name}.conf" ]] ||
      fail_loudly "Error: couldn't get Upstart service name for sshd."
  elif [[ "${init_ctl_type}" = "systemctl" ]]; then
    ssh_svc_name="sshd"
    [[ -e "/usr/lib/systemd/system/${ssh_svc_name}.service" ]] ||
      ssh_svc_name="ssh"
    [[ -e "/usr/lib/systemd/system/${ssh_svc_name}.service" ]] ||
      fail_loudly "Error: couldn't get systemd service name for sshd."
  elif [[ "${init_ctl_type}" = "service" ]]; then
    [[ -n "${ssh_ctl_path}" ]] ||
      fail_loudly "Error: couldn't get sysvinit service name for sshd."
    ssh_svc_name="$(basename "${ssh_ctl_path}")"
  fi

  restore_path
}


sshd_ctl() {
  if [[ -n "${ssh_ctl_path}" ]]; then
    "${sudo_path}" "${ssh_ctl_path}" "$@"
    return
  fi

  if [[ "${init_ctl_type}" = "launchctl" ]]; then
    if [[ "$1" = "start" ]]; then
      "${sudo_path}" "${init_ctl_path}" load -F "${ssh_svc_name}"
    elif [[ "$1" = "stop" ]]; then
      "${sudo_path}" "${init_ctl_path}" unload -F "${ssh_svc_name}"
    fi
  elif [[ "${init_ctl_type}" = "service" ]]; then
    "${sudo_path}" "${init_ctl_path}" "${ssh_svc_name}" "$1"
  else
    "${sudo_path}" "${init_ctl_path}" "$1" "${ssh_svc_name}"
  fi
}

wipe_ssh_key() {
  rm -f "${key_local}" "${key_local}.pub"

  if [[ -e "${HOME}/.ssh/authorized_keys" ]]; then
    sed '$ d' "${HOME}/.ssh/authorized_keys" >"${HOME}/.ssh/tmp_keys"
    mv "${HOME}/.ssh/tmp_keys" "${HOME}/.ssh/authorized_keys"
  fi
}

gen_ssh_key() {
  [[ -e "${key_local}" && -e "${key_local}.pub" ]] && wipe_ssh_key
  mkdir -p "${key_dir_local}"

  ssh-keygen -q -t rsa -N "" -f "${key_local}"
  cat "${key_local}.pub" >>"${HOME}/.ssh/authorized_keys"
}

grab_username() {
  local hostname
  IFS="@" read -ra hostname <<< "$1"
  printf "${hostname[0]}"
}

if [[ -z "${SSH_TTY}" ]]; then
  [[ "$#" -gt "0" ]] ||
    { echo >&2 "Usage: $(basename "$0") nodename"; exit 1; }

  echo "$(basename "$0") may require your local sudo password..."
  detect_init
  gen_ssh_key

  ssh "$1" "mkdir -p ${key_dir_remote}"
  scp -q "${key_local}" "$1:${key_remote}"
  scp -q "${key_local}.pub" "$1:${key_remote}.pub"

  sshd_ctl start
  echo "Awaiting remote assistance, Ctrl-C to end..."
  ssh -N -R "${DCP_HALP_PORT}:localhost:22" "$1"
  echo "Cleaning up..."
  sshd_ctl stop

  ssh "$1" "rm -f ${key_remote} ${key_remote}.pub"

  wipe_ssh_key
  cleanup_globals
else
  if [[ "$#" -lt "1" ]]; then
    echo >&2 "Usage: $(basename "$0") connection"
    echo >&2 ""
    echo >&2 "Currently available connections:"
    for conn in ${key_dir_local}/*@*.pub; do
      conn="$(basename "${conn}")"
      echo >&2 "${conn%.*}"
    done
    unset conn
    exit 1
  fi

  [[ -e "${key_dir_local}/${1}" && -e "${key_dir_local}/${1}.pub" ]] ||
    fail_loudly "Error: invalid connection."

  ssh -p "${DCP_HALP_PORT}" -i "${key_dir_local}/${1}" "$(grab_username "${1}")@localhost"
  cleanup_globals
fi
