#!/usr/bin/env bash

set -eo pipefail

readonly OS="$(uname -s)"
readonly NON_DCP_DOTFILES=( \
  .bash_login               \
  .profile                  \
  .zlogin                   \
)
readonly DCP_CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/dcp"
readonly WARNING_SHOWN_FLAG_PATH="${DCP_CONFIG_DIR}/symlink-warning-shown"
readonly PATH_MIGRATIONS=(                                  \
	"${HOME}/.dcp/conf/plugins:${DCP_CONFIG_DIR}/plugins.lst" \
	"${HOME}/.dcp/conf/theme:${DCP_CONFIG_DIR}/zsh-theme"     \
)

warnfln() {
  local fmt="$1"; shift
  printf >&2 "\033[0;33m[WARN]:\033[0m ${fmt}\n" "$@"
}

__ary_join() {
  local sep="$1"; shift
  printf "%s" "$1"; shift
  printf "%s" "${@/#/${sep}}"
}

__ln_snfv() {
  # Solaris' and OpenBSD's ln(1) don't have -v
  printf >&2 "%s -> %s\n" "$2" "$1"

  # Solaris' doesn't have -n (or its equivalent -h)
  if [[ -h "$2" ]]; then
    rm -f "$2"
  fi

  ln -sf "$1" "$2"
}

__link_dotfile() {
  local dotfile="$(basename "$1")"
  local link="${HOME}/.${dotfile}"

  if [[ ! -h "${link}" ]] && [[ -d "${link}" || -s "${link}" ]]; then
    warnfln "~/.%s is a directory or file of non-zero size, skipping" \
            "${dotfile}"
  else
    __ln_snfv "$1" "${link}"
  fi
}

if [[ "${OS}" = "Darwin" ]]; then
  link_dotfile() {
    __link_dotfile "$@"
  }
else
  link_dotfile() {
    case "$(basename "$1")" in
      khdrc|kwm|osx)  : ;;
      *)              __link_dotfile "$@"
    esac
  }
fi

standard_cleanup() {
  if [[ "${OS}" = "Darwin" && ! -e "${HOME}/.hushlogin" ]]; then
    touch "${HOME}/.hushlogin"
  fi
  if [[ "${OS}" != "Darwin" && -h "${HOME}/.osx" ]]; then
    rm -f "${HOME}/.osx"
  fi
  if [[ -h "${HOME}/.gitignore_global" ]]; then
    rm -f "${HOME}/.gitignore_global"
  fi
}

perform_migrations() {
  local performed_migration="false"
  local migration old_path new_path

  for migration in "${PATH_MIGRATIONS[@]}"; do
    IFS=':' read -r old_path new_path <<< "${migration}"

    if [[ -e "${old_path}" ]]; then
      if ! "${performed_migration}"; then
        warnfln "The ~/.dcp/conf directory is deprecated and will be removed soon."
        performed_migration="true"
      fi

      warnfln "Moving %s -> %s" "${old_path}" "${new_path}"
      mv "${old_path}" "${new_path}"
    fi
  done

  if "${performed_migration}"; then
    printf >&2 "\n"
  fi
}

check_non_dcp() {
  local result="false"
  local dotfile

  for dotfile in "${NON_DCP_DOTFILES[@]}"; do
    if [[ -e "${HOME}/${dotfile}" ]]; then
      if ! "${result}"; then
        printf >&2 "\n"
      fi

      result="true"

      warnfln "~/%s exists but is not provided by ~/.dcp" "${dotfile}"
    fi
  done

  "${result}"
}

__maybe_git_config() {
  if ! git config --global "$1" >/dev/null; then
    git config --global "$1" "$2"
  fi
}

configure_git() {
  git config --global "core.excludesfile" "${HOME}/.cvsignore"

  __maybe_git_config "color.ui" "true"
  __maybe_git_config "core.editor" "vim"
  __maybe_git_config "push.default" "matching"
  __maybe_git_config "grep.lineNumber" "true"
  __maybe_git_config "submodule.fetchJobs" "2"
  __maybe_git_config "core.attributesfile" "${HOME}/.gitattributes"

  if [[ ! -e "${HOME}/.gitattributes" ]]; then
    touch "${HOME}/.gitattributes"
  fi

  if [[ "${OS}" = "Darwin" ]]; then
    __maybe_git_config "core.trustctime" "false"
    __maybe_git_config "diff.plist.textconv" "plutil -convert xml1 -o -"
    __maybe_git_config "diff.provision.textconv" "openssl smime -inform der -verify -in"

    if ! grep -q '^\*\.plist' "${HOME}/.gitattributes"; then
      printf "*.plist diff=plist\n" >>"${HOME}/.gitattributes"
    fi

    if ! grep -q '^\*\.mobileprovision' "${HOME}/.gitattributes"; then
      printf "*.mobileprovision diff=provision\n" >>"${HOME}/.gitattributes"
    fi
  fi
}

print_warning() {
  local dotfiles="$(__ary_join ", " "${NON_DCP_DOTFILES[@]}")"
  cat >&2 <<EOT

Having any of [${dotfiles}] should (in theory) be harmless.
That said, it can also really mess things up. It's good to examine their
contents and evaluate if they need to exist.

For example, RVM will persistently try to create ~/.zlogin to ensure that
it gets loaded, but this already happens in ~/.dcp/lib/post_init.sh, and the
code they put in ~/.zlogin will cause zsh to both start and exit with return
code 1 for login shells if you ever uninstall RVM. Not good!

This wall of warning text will only be shown once, unless you get rid of these
files then create them again at some point.
EOT
}

main() {
  standard_cleanup

  perform_migrations

  local dotfile
  for dotfile in "${HOME}/.dcp/dot"/* "${HOME}/.vim"/*vimrc; do
    link_dotfile "${dotfile}"
  done

  if ! check_non_dcp; then
    rm -f "${WARNING_SHOWN_FLAG_PATH}"
  elif [[ ! -e "${WARNING_SHOWN_FLAG_PATH}" ]]; then
    print_warning
    mkdir -p "$(dirname "${WARNING_SHOWN_FLAG_PATH}")"
    touch "${WARNING_SHOWN_FLAG_PATH}"
  fi

  if command -v git >/dev/null; then
    # Only Git Things (tm)
    configure_git
  fi
}

main "$@"
