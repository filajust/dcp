#!/usr/bin/env bash

set -eo pipefail

readonly GIT_BASE_URL="https://github.com/dpoggi"

. "${HOME}/.dcp/lib/logging.sh"

clone_repo() {
  local name="$(basename "$1")"
  name="${name%.*}"

  infofln "Cloning %s into %s..." "${name}" "$2"

  export GIT_DIR="$(basename "$2")/.git"
  git clone --quiet --recursive "$1" "$2" 2> /dev/null

  infofln "Finished cloning %s." "${name}"
  printf "\n"
}

main() {
  if [[ "$#" = "0" ]]; then
    printf >&2 "Usage: %s <archive.tar.xz>\n" "$(basename "$0")"
    return 1
  fi

  if [[ -e "$1" ]]; then
    errorfln "%s already exists" "$1"
    return 1
  fi

  local tmp_dir="$(mktemp -q -d /tmp/dcp-shrinkwrap-XXXXXX)"

  if [[ -z "${tmp_dir}" ]]; then
    errorfln "Unable to create temp directory"
    return 1
  fi

  clone_repo "${GIT_BASE_URL}/dcp.git" \
             "${tmp_dir}/.dcp"
  clone_repo "${GIT_BASE_URL}/dotvim.git" \
             "${tmp_dir}/.vim"
  clone_repo "${GIT_BASE_URL}/oh-my-zsh.git" \
             "${tmp_dir}/.oh-my-zsh"
  clone_repo "https://github.com/zsh-users/zsh-syntax-highlighting.git" \
             "${tmp_dir}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

  infofln "Updating submodules for dotvim..."

  pushd "${tmp_dir}/.vim" > /dev/null

  export GIT_DIR=".git"
  git submodule update --quiet --init --recursive
  scripts/post_update.sh

  pushd "bundle/vimproc" > /dev/null
  make clean
  popd > /dev/null

  infofln "Finished."
  printf "\n"

  popd > /dev/null # back to original CWD

  infofln "Checking out latest release of zsh-syntax-highlighting..."

  pushd "${tmp_dir}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting" > /dev/null
  export GIT_DIR=".git"
  git checkout --quiet --force "$(git describe --tags --abbrev=0)"
  popd > /dev/null

  infofln "Finished."
  printf "\n"

  infofln "Compressing archive..."

  local archive_name="$(basename "$1")"

  pushd "${tmp_dir}" > /dev/null
  tar -cJf "${archive_name}" ".oh-my-zsh" ".dcp" ".vim"
  popd > /dev/null

  infofln "Moving archive..."

  mv "${tmp_dir}/${archive_name}" "$1"

  infofln "Cleaning up..."

  if [[ -d "${tmp_dir}" ]]; then
    rm -rf "${tmp_dir}"
  fi

  infofln "Done."
}

main "$@"
