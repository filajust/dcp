#!/bin/bash

warning() {
  printf >&2 "\033[0;33m[WARNING]:\033[0m %s\n" "$1"
}

link_dotfile() {
  local link="${HOME}/.$(basename "$1")"
  if [[ ! -h "${link}" ]] && [[ -s "${link}" || -d "${link}" ]]; then
    warning "~/$(basename "${link}") is a directory or file of non-zero size, skipping."
  else
    ln -snfv "$1" "${link}"
  fi
}

maybe_git_config() {
  git config --global "$1" >/dev/null || git config --global "$1" "$2"
}

print_warning() {
  cat >&2 <<EOT

Having any of [${non_dcp_dotfiles[*]}] should (in theory) be harmless.
That said, it can also really mess things up. It's good to examine their
contents and evaluate if they need to exist.

For example, RVM will persistently try to create ~/.zlogin to ensure that
it gets loaded, but this already happens in ~/.dcp/postrc, and the code they
put in ~/.zlogin will cause zsh to both start and exit with return code 1 for
login shells if you ever uninstall RVM. Not good!

This wall of warning text will only be shown once, unless you get rid of these
files then create them again at some point.
EOT
}

DCP_OS="$(uname -s)"
non_dcp_dotfiles=(.profile .bash_login .zlogin)
has_non_dcp_dotfiles="false"
warning_shown_path="${HOME}/.dcp/conf/install_links_warning_shown"

for dotfile in "${HOME}/.dcp/dot"/* "${HOME}/.vim"/*vimrc; do
  if [[ "${DCP_OS}" != "Darwin" && "$(basename "${dotfile}")" = "osx" ]]; then
    [[ -h "${HOME}/.osx" ]] && rm -f "${HOME}/.osx"
  elif [[ "${DCP_OS}" != "Darwin" && "$(basename "${dotfile}")" = "kwm" ]]; then
    :
  else
    link_dotfile "${dotfile}"
  fi
done

[[ "${DCP_OS}" = "Darwin" ]] && touch "${HOME}/.hushlogin"

for dotfile in "${non_dcp_dotfiles[@]}"; do
  if [[ -e "${HOME}/${dotfile}" ]]; then
    [[ "${has_non_dcp_dotfiles}" = "true" ]] || printf "\n"
    has_non_dcp_dotfiles="true"
    warning "~/${dotfile} exists but is not provided by ~/.dcp."
  fi
done

if [[ "${has_non_dcp_dotfiles}" = "true" && ! -e "${warning_shown_path}" ]]; then
  print_warning
  touch "${warning_shown_path}"
fi
[[ "${has_non_dcp_dotfiles}" = "false" ]] && rm -f "${warning_shown_path}"

if hash git 2>/dev/null; then
  maybe_git_config "color.ui" "true"
  maybe_git_config "core.editor" "vim"
  maybe_git_config "push.default" "matching"
  maybe_git_config "grep.lineNumber" "true"
  git config --global "core.excludesfile" "${HOME}/.gitignore_global"
  [[ "${DCP_OS}" = "Darwin" ]] && maybe_git_config "core.trustctime" "false"
fi
