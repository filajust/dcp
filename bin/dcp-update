#!/usr/bin/env bash

. "${HOME}/.dcp/lib/logging.sh"

checkout_tag() {
  pushd "$1" > /dev/null

  if [[ "$2" = "zsh-syntax-highlighting" ]]; then
    local tag="0.5.0"
  else
    local tag="$(git describe --abbrev=0 --tags 2> /dev/null)"
  fi

  if [[ -n "${tag}" ]]; then
    infofln "Checking out tag for latest version of %s..." "$2"
    git checkout --quiet --force "${tag}"
  fi

  popd > /dev/null
}

# Thank you based Homebrew, no way I would've thought of some of this...
update_repo() {
  local repo try_tag
  while [[ "$#" -gt "0" ]]; do
    [[ "$1" = "--try-tag" ]] && try_tag="true" || repo="$1"
    shift
  done

  pushd "${repo}" >/dev/null
  local name="$(basename "$(git remote get-url origin 2>/dev/null)" .git)"
  name="${name%.*}"
  infofln "Updating %s..." "${name}"

  infofln "Fetching origin..."

  local initial_branch="$(git symbolic-ref --short HEAD 2>/dev/null)"


  if ! git fetch --quiet --force \
                 origin "refs/heads/master:refs/remotes/origin/master"; then
    errorfln "Unable to fetch origin."
    exit 1
  fi

  if [[ -n "$(git status --porcelain --ignore-submodules --untracked-files=all 2>/dev/null)" ]]; then
    infofln "Attempting to stash uncommitted changes:"
    git status --short --ignore-submodules --untracked-files=all
    git merge --abort > /dev/null 2>&1
    git -c "user.name=dcp update" \
        -c "user.email=dcp-update@localhost" \
        stash save --quiet --include-untracked
    git reset --hard --quiet
    [[ -n "${stashed}" ]] && stashed="${stashed}, "
    stashed="${stashed}${name}"
  fi

  if [[ "${initial_branch}" != "master" ]]; then
    infofln "Checking out master..."
    if git merge-base --is-ancestor master origin/master > /dev/null 2>&1; then
      git checkout --quiet --force master
    else
      git checkout --quiet --force -B master origin/master
    fi
  fi

  infofln "Updating master..."
  git merge --quiet --ff-only --no-edit origin/master \
            --strategy=recursive \
            --strategy-option=ours \
            --strategy-option=ignore-all-space
  if [[ "$?" != "0" ]]; then
    infofln "Unable to update master using a fast-forward, forcing a new checkout..."

    if ! git checkout --quiet --force -B master origin/master; then
      errorfln "Unable to force a new checkout of origin/master."
      exit 1
    fi
  fi

  if [[ "${try_tag}" = "true" ]]; then
    checkout_tag "${repo}" "${name}"
  fi

  if [[ -s ".gitmodules" ]]; then
    infofln "Updating submodules..."
    git submodule update --quiet --init --recursive
  fi
  if [[ "${name}" = "dotvim" ]]; then
    checkout_tag "${HOME}/.vim/pathogen" "pathogen"
    hook_script="${HOME}/.vim/scripts/post_update.sh"
    [[ -x "${hook_script}" ]] && "${hook_script}"
  fi

  infofln "Finished updating %s." "${name}"
  printf >&2 "\n"
  popd >/dev/null
}

stashed=""

update_repo "${HOME}/.dcp"
update_repo "${HOME}/.vim"

update_repo "${HOME}/.oh-my-zsh"
plugins_dir="${HOME}/.oh-my-zsh/custom/plugins"
while read -d $'\x00' -r plugin; do
  if [[ "${plugin}" != */example ]]; then
    update_repo --try-tag "${plugin}"
  fi
done < <(find "${plugins_dir}" -maxdepth 1 \
                               -type d \
                               -print0 2> /dev/null | tail -n +2)

infofln "Updating symlinks..."
"${HOME}/.dcp/bin/dcp-install-links"
infofln "Done."

if [[ -n "${stashed}" ]]; then
  printf >&2 "\n"
  infofln "You may want to restore stashed changes to:"
  infofln "%s" "${stashed}"
  infofln "Use \`git stash pop' to do so."
fi
