#!/usr/bin/env bash

set -eo pipefail

readonly MAVEN_VERSION="3.5.0"
readonly ARCHETYPE_PRESETS=(                                    \
  "org.apache.maven.archetypes:maven-archetype-quickstart:1.1"  \
  "org.apache.maven.archetypes:maven-archetype-webapp:1.0"      \
  "org.jetbrains.kotlin:kotlin-archetype-jvm:1.1.3-2"           \
  "org.jetbrains.kotlin:kotlin-archetype-js:1.1.3-2"            \
  "com.airhacks:javaee7-essentials-archetype:1.3"               \
)

print_usage() {
  cat <<EOT
Usage: $(basename "$0") [options] [preset # or groupId:artifactId:version]

OPTIONS:
  -h, --help                            Display this message
  --skip-wrapper                        Skip generating Maven wrapper
  --skip-git                            Skip generating .git{attributes,ignore}

ARCHETYPE PRESETS:
EOT
  local i
  for i in "${!ARCHETYPE_PRESETS[@]}"; do
    printf "  %s) %s\n" "$(( ${i} + 1 ))" "${ARCHETYPE_PRESETS[${i}]}"
  done
}

assert_deps() {
  local dep
  for dep in "$@"; do
    if ! command -v "${dep}" >/dev/null; then
      printf >&2 "%s not found\n" "${dep}"
      return 1
    fi
  done
}

__archetype_resolve() {
  if [[ "$1" =~ ^[^:]+:[^:]+:[^:]+$ ]]; then
    printf "%s" "$1"
  elif [[ "$1" =~ ^[[:digit:]]+$ ]] &&
       [[ "$1" -gt "0" && "$1" -le "${#ARCHETYPE_PRESETS[@]}" ]]; then
    printf "%s" "${ARCHETYPE_PRESETS[$(( $1 - 1 ))]}"
  fi
}

__archetype_find_generated_dir() {
  local pomfile
  while IFS='' read -d '' -r pomfile; do
    printf "%s" "$(dirname "${pomfile}")"
    return
  done < <(find "$1" -mindepth 2 \
                     -maxdepth 2 \
                     -type f \
                     -name pom.xml \
                     -print0 2>/dev/null)
}

__archetype_move_generated_files() {
  local generated_dir="$1"
  local destination="$2"

  local item
  while IFS='' read -d '' -r item; do
    mv "${item}" "${destination}"
  done < <(find "${generated_dir}" -mindepth 1 \
                                   -maxdepth 1 \
                                   -print0 2>/dev/null)
}

__archetype_generate_gav() {
  local dir="$1"
  local group_id artifact_id version
  IFS=':' read -r group_id artifact_id version <<< "$2"

  mvn archetype:generate -DarchetypeGroupId="${group_id}" \
                         -DarchetypeArtifactId="${artifact_id}" \
                         -DarchetypeVersion="${version}"

  local generated_dir="$(__archetype_find_generated_dir "${dir}")"

  if [[ ! -d "${generated_dir}" ]]; then
    printf >&2 "Unable to find directory generated by archetype\n"
    return 1
  fi

  __archetype_move_generated_files "${generated_dir}" "${dir}"/

  rmdir "${generated_dir}"
}

generate_archetype() {
  local gav="$(__archetype_resolve "$2")"

  if [[ -z "${gav}" ]]; then
    printf >&2 "Invalid archetype %s, skipping generation\n" "$2"
    return
  fi

  __archetype_generate_gav "$1" "${gav}"
}

__mvnw_check_overwrite_existing() {
  if [[ ! -e "$1/.mvn/wrapper" ]] &&
     [[ ! -e "$1/mvnw" && ! -e "$1/mvnw.cmd" ]]; then
    return
  fi

  printf >&2 "Existing Maven wrapper detected. Overwrite (y/n)? "
  read -r

  if [[ "${REPLY}" =~ ^[Yy] ]]; then
    rm -rf "$1/.mvn/wrapper" "$1/mvnw" "$1/mvnw.cmd"
  else
    return 1
  fi
}

generate_mvnw() {
  if ! __mvnw_check_overwrite_existing "$1"; then
    return
  fi

  pushd "$1" >/dev/null
  mvn -N io.takari:maven:wrapper -Dmaven="${MAVEN_VERSION}"
  popd >/dev/null

  # Permissions on these come out all kinds of wrong
  chmod 644 "$1/mvnw.cmd" "$1/.mvn/wrapper"/maven-wrapper.{jar,properties}

  # Zap annoying extra echo in Unix wrapper script
  sed -e '/^[[:space:]]*echo \$MAVEN_PROJECTBASEDIR$/d' "$1/mvnw" >"$1/mvnw.fixed"
  mv "$1/mvnw.fixed" "$1/mvnw"

  # Fix permissions here too (now that it's been overwritten)
  chmod 755 "$1/mvnw"
}

__git_check_overwrite_existing() {
  if [[ ! -e "$1" ]]; then
    return
  fi

  printf >&2 "Existing %s detected. Overwrite (y/n)? " "$(basename "$1")"
  read -r

  if [[ "${REPLY}" =~ ^[Yy] ]]; then
    # It would be overwritten anyway, but remove it in case it's a link
    rm -f "$1"
  else
    return 1
  fi
}

__git_cat() {
  if [[ -s "${HOME}/.dcp/share/git/$1" ]]; then
    cat "${HOME}/.dcp/share/git/$1"
  else
    local file_contents="$( \
      curl -fsSL \
           "https://raw.githubusercontent.com/dpoggi/dcp/master/share/git/$1" \
    )"
    # This is assigned to a local var first so cURL returning > 0 stops
    # the whole process
    printf "%s" "${file_contents}"
  fi
}

generate_git() {
  if __git_check_overwrite_existing "$1/.gitattributes"; then
    __git_cat maven.gitattributes >"$1/.gitattributes"
  fi
  if __git_check_overwrite_existing "$1/.gitignore"; then
    __git_cat maven.gitignore >"$1/.gitignore"
  fi
}

main() {
  local skip_wrapper="false"
  local skip_git="false"
  local -a archetypes

  while (( $# > 0 )); do
    case "$1" in
      -h|--help)      print_usage; return ;;
      --skip-wrapper) skip_wrapper="true" ;;
      --skip-git)     skip_git="true"     ;;
      -*)
        printf >&2 "Unknown option %s\n\n" "$1"
        print_usage >&2
        return 1
        ;;
      *)              archetypes+=("$1")
    esac
    shift
  done

  assert_deps mvn curl

  if [[ "${#archetypes[@]}" -eq "1" ]]; then
    generate_archetype . "${archetypes[0]}"
  elif [[ "${#archetypes[@]}" -gt "1" ]]; then
    printf >&2 "Specifying multiple archetypes is not supported\n\n"
    print_usage >&2
    return 1
  fi

  if ! "${skip_wrapper}"; then
    generate_mvnw .
  fi

  if ! "${skip_git}"; then
    generate_git .
  fi
}

main "$@"
