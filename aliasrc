# General aliases
alias c="clear"
alias ll="ls -la"
alias la="ls -a"
alias h="history | tail -32"
alias ip_ext="curl ip.danpoggi.com"

# Git aliases
alias ga="git add"
alias gp="git push"
alias gpl="git pull"
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gll="git log --stat --oneline --decorate"
alias gs="git status"
alias gst="git stash"
alias gsa="git stash apply"
alias gsl="git stash list"
alias gd="git diff"
alias gds="git diff --staged"
alias gc="git commit"
alias gcm="git commit -m"
alias gco="git checkout"
alias gb="git branch"
alias gf="git fetch"
alias gr="git rebase"
alias gm="git merge"
alias gn="git init && git add . && git commit -m 'Initial commit.'"
alias grv="git remote -v"
alias gcb="git fetch --prune; git branch --merged | colrm 1 2 | grep -v '^master$' | xargs git branch -d"
alias ggr="git grep --break --heading --line-number"
gi() { curl "http://www.gitignore.io/api/$@"; }
gpub() {
  [[ -n "$1" ]] || return 1

  git push origin "${1}:refs/heads/$1"
  git fetch origin
  git config "branch.${1}.remote" origin
  git config "branch.${1}.merge" "refs/heads/$1"
  git checkout "$1"
}

# Mac specifics
if [[ "$(uname)" = "Darwin" ]]; then
  # Open a man page in Preview
  pman() {
    man -t "$1" | open -f -a /Applications/Preview.app
  }

  # Reset "Open With..." menus after connecting a drive with applications on it
  reset_launch_services() {
    /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain system -domain user
    killall Finder
  }

  # Flush DNS cache and reset mDNSResponder
  reset_dns() {
    echo "Please enter your user password to flush the DNS cache."

    if [[ -n "$(get_bin discoveryutil)" ]]; then
      sudo discoveryutil mdnsflushcache
      sudo discoveryutil udnsflushcache
    else
      sudo dscacheutil -flushcache
      sudo killall -HUP mDNSResponder
    fi
  }

  lctl_getenv() {
    launchctl getenv "$1"
  }
  lctl_setenv() {
    launchctl setenv "$1" "${!1}"
  }

  # Open Xcode for current folder
  alias xc="open -a /Applications/Xcode.app ."
  # Dammit Xcode
  alias fuxcode="rm -rf ${HOME}/Library/Developer/Xcode/DerivedData"
fi

# Bash PS1 colors
c_red="\[\033[0;31m\]"
c_green="\[\033[0;32m\]"
c_white="\[\033[0;37m\]"
c_cyan="\[\033[0;36m\]"
c_purple="\[\033[0;35m\]"
c_yellow="\[\033[1;33m\]"
c_reset="\[\033[0m\]"

# Bash PS1 Functions
dcp_ps1_preamble() {
  if [[ "${UID}" -eq "0" ]]; then printf "${c_red}"; else printf "${c_green}"; fi
  printf "\\\\u${c_white}@${c_cyan}\\h${c_white}:${c_purple}\\w"
}
dcp_ps1_git_branch() {
  git branch 2>&- | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
dcp_ps1_git() {
  [[ "${UID}" -eq "0" ]] || printf "${c_yellow}\$(dcp_ps1_git_branch)"
}
dcp_ps1_uid() {
  if [[ -n "${DPOGGI_TWOLINE}" ]]; then printf "\n"; else printf " "; fi
  printf "${c_red}\\\$${c_reset} "
}

# Set prompt in either shell
dcp_set_prompt() {
  if [[ -n "${BASH}" ]]; then
    export PS1="$(dcp_ps1_preamble)$(dcp_ps1_git)$(dcp_ps1_uid)"
  elif [[ -n "${ZSH}" ]]; then
    source "${ZSH}/themes/${ZSH_THEME}.zsh-theme"
  fi
}

# One-line or two-line prompt (for convenience, these have no prefix)
oneline() {
  unset DPOGGI_TWOLINE
  dcp_set_prompt
}
twoline() {
  export DPOGGI_TWOLINE="true"
  dcp_set_prompt
}

# Utility function for alias/function overrides of binaries
get_bin() {
  [[ "$#" -ge "1" ]] || return 1
  if [[ -z "${BASH}" ]]; then
    whence -p "$1"
  else
    type -P "$1"
  fi
}

# Utility function to get job number after &ing a process from its PID
# (for shell functions only unless you're doing something weird and set -m)
get_jobno() {
  local sed_opts
  jobs -l | fgrep "${pid}" | cut -d ' ' -f 1 | sed -e 's/[^0-9]//g'
}

# Clipboard
cbcopy() {
  local copy
  if hash pbcopy 2>/dev/null; then
    copy="pbcopy"
  elif hash xsel 2>/dev/null; then
    copy="xsel --clipboard --input"
  else
    printf >&2 "Fatal: neither pbcopy nor xsel found.\n"
    return 1
  fi

  if [[ -n "$1" ]]; then
    cat "$1" | ${copy}
  else
    ${copy}
  fi
}

cbpaste() {
  local paste
  if hash pbpaste 2>/dev/null; then
    paste="pbpaste"
  elif hash xsel 2>/dev/null; then
    paste="xsel --clipboard --output"
  else
    printf >&2 "Fatal: neither pbpaste nor xsel found.\n"
    return 1
  fi

  if [[ -n "$1" ]]; then
    ${paste} >>"$1"
  else
    ${paste}
  fi
}
