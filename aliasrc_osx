#
# Xcode aliases
#

# Open Xcode for current folder (prefers workspace to project)
alias xc="open -a /Applications/Xcode.app ."
# Dammit Xcode (delete derived data twice a day for entire career as needed)
alias fuxcode="rm -rf ${HOME}/Library/Developer/Xcode/DerivedData"
# Verify Xcode installation
alias haxcode="spctl --assess --verbose /Applications/Xcode.app"


#
# Homebrew - fully update/upgrade, clean up the mess
#

alias boop="brew update && brew upgrade && brew cleanup -sf"


#
# System-level resets... these come in handy.
#

# Reset "Open With..." menus after connecting a drive with applications on it
reset_launch_services() {
  /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain system -domain user
  killall Finder
}

# Flush DNS cache and reset mDNSResponder
reset_dns_cache() {
  printf >&2 "Flushing the DNS cache (enter your user password if prompted)...\n"

  if hash discoveryutil 2>/dev/null; then
    # OS X 10.9 - 10.10.3
    sudo discoveryutil mdnsflushcache
    sudo discoveryutil udnsflushcache
  else
    # Sane versions of OS X
    sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
  fi
}

# Clear Quick Look's file locks (so you can empty the trash)
alias reset_quick_look="qlmanage -r"


#
# Oracle Jabba or: How I Learned to Stop Worrying...
# and Begrudgingly Accept the State of Multiple Java Installs on OS X
# Yes, I've seen jenv. No, I don't think I like it.
#

use_jdk() {
  [[ "$#" -gt "0" && "${#1}" = "1" ]] || return 1
  [[ "$1" -ge "7" && "$1" -le "8" ]] || return 1

  # Finds the newest Java _ (first argument) JDK available
  local jdk_dir="$(find "/Library/Java/JavaVirtualMachines" -name "jdk1\.${1}*" -print | tail -n 1)"

  if [[ -d "${jdk_dir}" ]]; then
    printf >&2 "Using $(basename "${jdk_dir}") (enter your user password if prompted)...\n"
    sudo ln -snfv "${jdk_dir}/Contents/Home" "/Library/Java/Home"
  else
    printf >&2 "Java $1 not found\n"
    return 1
  fi
}


#
# Just launchd things (tm)
#

# Convenience wrapper for globally "exporting" a variable. Similar to setting
# environment variables in the Control Panel on Windows. Seen by apps like
# IntelliJ that pick up on certain vars: JAVA_HOME, etc.
launchd_export() {
  local var="$1"
  local val="$(eval "printf \"\${${var}}\"")"
  launchctl setenv "${var}" "${val}"
}

# launchctl wrapper for making things feel a little more... right.
lctl() {
  case "$1" in
    start)
      shift
      sudo launchctl load -F "$@"
      ;;
    stop)
      shift
      sudo launchctl unload -F "$@"
      ;;
    restart)
      shift
      sudo launchctl unload -F "$@"
      sudo launchctl load -F "$@"
      ;;
    "")
      return 1
      ;;
    *)
      sudo launchctl "$@"
      ;;
  esac
}

# launchctl wrapper for apsd (Apple Push Service: Messages.app, etc.)
apsctl() {
  lctl "$1" "/System/Library/LaunchDaemons/com.apple.apsd.plist"
}

# launchctl wrapper for CoreAudio (because sometimes there be dragons)
coreaudioctl() {
  lctl "$1" "/System/Library/LaunchDaemons/com.apple.audio.coreaudiod.plist"
}
